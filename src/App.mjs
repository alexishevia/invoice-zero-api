import InMemoryPersistence from './persistence/Memory.mjs';
import FilePersistence from './persistence/File.mjs';
import validate from './validate.mjs';
import * as actions from './actions.mjs';
import { NotFoundError } from './errors.mjs';

function getPersistenceFromOptions({ type, filepath } = {}) {
  switch(type) {
    case 'file':
      return new FilePersistence({ filepath });
    default:
      return new InMemoryPersistence();
  }
}

const Account = {
  required: {
    name: (val) => validate(val).string().notEmpty(),
    initialBalance: (val) => validate(val).number().biggerOrEqualThan(0),
  },
  autoGenerated: { id: true, deleted: true, modifiedAt: true },
};

const Category = {
  required: {
    name: (val) => validate(val).string().notEmpty(),
  },
  autoGenerated: { id: true, deleted: true, modifiedAt: true },
};

export default function App(options = {}) {
  const persistence = getPersistenceFromOptions(options.persistence);
  const state = {
    accounts: {},
    categories: {},
  };

  function processEvent(event) {
    const { type, payload } = event;
    switch(type) {
      case 'accounts/create':
      case 'accounts/update':
      case 'accounts/delete':
        state.accounts[payload.id] = payload;
        break;
      case 'categories/create':
      case 'categories/update':
      case 'categories/delete':
        state.categories[payload.id] = payload;
        break;
      default:
        throw new Error(`unknown event.type: ${type}`);
    }
  }

  function dispatch(event) {
    persistence.append(event)
    processEvent(event);
  }

  return {
    start: async () => {
      // hydrate state
      await persistence.forEach(processEvent);
    },

    // accounts
    createAccount: (data) => actions.create('accounts/create', {
      dispatch, data, model: Account
    }),
    updateAccount: (id, data) => actions.update('accounts/update', {
      dispatch, data, model: Account, original: state.accounts[id]
    }),
    deleteAccount: (id) => actions.destroy('accounts/delete', {
      dispatch, model: Account, original: state.accounts[id]
    }),
    getAccountByID: (id) => {
      if (state.accounts[id]) {
        return state.accounts[id];
      }
      throw new NotFoundError(`account with id: ${id} not found`);
    },
    listAccounts: () => Object.values(state.accounts),

    // categories
    createCategory: (data) => actions.create('categories/create', {
      dispatch, data, model: Category,
    }),
    updateCategory: (id, data) => actions.update('categories/update', {
      dispatch, data, model: Category, original: state.categories[id]
    }),
    deleteCategory: (id) => actions.destroy('categories/delete', {
      dispatch, model: Category, original: state.categories[id]
    }),
    getCategoryByID: (id) => {
      if (state.categories[id]) {
        return state.categories[id];
      }
      throw new NotFoundError(`category with id: ${id} not found`);
    },
    listCategories: () => Object.values(state.categories),
  };

}
